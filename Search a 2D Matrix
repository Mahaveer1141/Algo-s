https://leetcode.com/problems/search-a-2d-matrix/

Approach:-
use binary search
take l = 0 and r = m*n-1;
calculate mid = l+r / 2;
row = mid / m
col = mid % m;
matrix[row][col]
apply normal binary search after this.

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n = matrix.size(), m = matrix[0].size();
        int l = 0, r = n*m - 1;
        while (r >= l) {
            int mid = (r + l) / 2;
            int row = mid/m, col = mid%m;
            int val = matrix[row][col];
            if (val == target)
                return true;
            else if (val < target)
                l = mid+1;
            else
                r = mid-1;
        }
        return false;
    }
};
