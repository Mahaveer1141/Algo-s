https://practice.geeksforgeeks.org/problems/n-meetings-in-one-room-1587115620/0

Approach:-
sort the array according to end because we want meeting which end first.
after that check if new meeting can be performed or not i.e it's starting is greater than previous meeting ending time.

class Solution
{
    public:
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    int maxMeetings(int start[], int end[], int n)
    {
        vector<pair<int, int>> v;
        for (int i = 0; i < n; i++)
            v.push_back({end[i], start[i]});
        sort(v.begin(), v.end());
        int ed = -1, ans = 0;
        for (int i = 0; i < n; i++) {
            if (v[i].second > ed) {
                ed = v[i].first;
                ans++;
            }
        }
        return ans;
    }
};
