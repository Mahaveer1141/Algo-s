https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1

Approach:-
We will backtrack for all 4 direction but we have to have check for infinte recusion so we will have vis array such that for any i,j we won't
recurse again and after that recusion is over will set that vis again to 0 because we want to a new recusion to go that i,j.

class Solution{
public:
    vector<string> ans;
    
    void solve(vector<vector<int>> m, int n, string s, int i, int j, vector<vector<int>> &vis) {
        if (i == n || j == n || i < 0 || j < 0)
            return;
        if (i == n-1 && j == n-1 && m[i][j]) {
            ans.push_back(s);
            return;
        }
        if (m[i][j] && !vis[i][j]) {
            vis[i][j] = 1;
            solve(m,n,s+'D',i+1,j,vis);
            vis[i][j] = 0;
            
            vis[i][j] = 1;
            solve(m,n,s+'U',i-1,j,vis);
            vis[i][j] = 0;
            
            vis[i][j] = 1;
            solve(m,n,s+'R',i,j+1,vis);
            vis[i][j] = 0;
            
            vis[i][j] = 1;
            solve(m,n,s+'L',i,j-1,vis);
            vis[i][j] = 0;
        }
    }
    
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<vector<int>> vis(n, vector<int>(n, 0));
        if (m[0][0])
            solve(m, n, "", 0, 0, vis);
        return ans;
    }
};
