https://practice.geeksforgeeks.org/problems/m-coloring-problem-1587115620/1#

go through every vertex and and check which color satisfy all the condition for it then give it that color 
and recurse to next node if next node can not be true then backtrack to previous node and change it's color

class Solution{
public:
    // Function to determine if graph can be coloured with at most M colours such
    // that no two adjacent vertices of graph are coloured with same colour.
    bool isValid(bool graph[101][101], int v, vector<int> color, int c, int n) {
        color[v] = c;
        for (int i=0; i<n; i++) {
            if (graph[v][i] && color[i] == color[v] && i!=v)
                return false;
        }
        return true;
    }
    
    bool solve(int i, bool graph[101][101], int m, int n, vector<int> &color) {
        if (i==n)
            return 1;
        // for (int i=0; i<n; i++) {
            for (int j=1; j<=m; j++) {
                if (isValid(graph, i, color, j, n)) {
                    color[i]=j;
                    if (solve(i+1, graph, m, n, color))
                        return true;
                    else
                        color[i]=0;
                }
            }
            return false;
        // }
        // return 1;
    }
    
    bool graphColoring(bool graph[101][101], int m, int n) {
        vector<int> color(n, 0);
        return solve(0, graph, m, n, color);
    }
};
