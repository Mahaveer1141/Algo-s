https://leetcode.com/problems/n-queens/

Approach:-
create a check function for checking if after adding an queen it don't fail the rules.
if row == n means every queen is assigned to row and we will add it in our ans.
we will simply recurse over every row and col.
after assigning the queen to some row, col we will check if that doesn't fail the rules before moving forward to row+1, we check before to avoid tle.
in row+1 recursion we will start col value equal to 0 because for every new row we can assign an queen to 0->n col.

class Solution {
public:
    bool check(vector<string> q) {
        int n = q.size();

        int cnt = 0;
        for (int col = 0; col < n; col++) {
            cnt = 0;
            for (int row = 0; row < n; row++)
                if (q[row][col] == 'Q') cnt++;
            if (cnt > 1) return false;
        }

        for (int row = 0; row < n; row++) {
            cnt = 0;
            for (int col = 0; col < n; col++) 
                if (q[row][col] == 'Q') cnt++;
            if (cnt > 1) return false;
        }

        for (int i = 0; i < n; i++) {
            cnt = 0;
            for (int row = i, col = 0; col < n && row < n; col++, row++)
                if (q[row][col] == 'Q') cnt++;
            if (cnt > 1) return false;

            cnt = 0;
            for (int row = i, col = n-1; row < n && col >= 0; row++, col--)
                if (q[row][col] == 'Q') cnt++;
            if (cnt > 1) return false;
        }
        for (int j = 1; j < n; j++) {
            cnt = 0;
            for (int row = 0, col = j; row < n && col < n; row++, col++)
                if (q[row][col] == 'Q') cnt++;
            if (cnt > 1) return false;

            cnt = 0;
            for (int row = 0, col = n-1-j; row < n-1 && col >= 0; row++, col--)
                if (q[row][col] == 'Q') cnt++;
            if (cnt > 1) return false;
        }

        return true;
    }

    vector<vector<string>> ans;
    void solve(int row, int col, int n, vector<string> q) {
        if (row == n || col == n) {
            if (row == n && check(q))
                ans.push_back(q);
            return;
        }

        solve(row, col+1, n, q);
        q[row][col] = 'Q';
        if (check(q)) {
            solve(row+1, 0, n, q);
            q[row][col] = '.';
        }
    }

    vector<vector<string>> solveNQueens(int n) {
        solve(0, 0, n, vector<string>(n, string(n, '.')));
        return ans;
    }
};
