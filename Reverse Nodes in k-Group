https://leetcode.com/problems/reverse-nodes-in-k-group/


class Solution {
public:
    int len(ListNode *head) {
        int ans = 0;
        while (head) {
            ans++;
            head = head->next;
        }
        return ans;
    }
    
    ListNode* reverse(ListNode *node, int k) {
        ListNode *temp = node;
        ListNode *prev = NULL;
        for (int i = 0; i < k-1; i++) {
            ListNode *nxt = temp->next;
            temp->next = prev;
            prev = temp;
            temp = nxt;
        }
        // so that last node don't have null value and go to next node in k cycle
        node->next = temp->next;
        temp->next = prev;
        node = temp;
        return node;
    }
    
    ListNode* reverseKGroup(ListNode* head, int k) {
        if (k == 1)
            return head;
        int n = len(head);
        ListNode *temp = head;
        for (int i = 0; i < n/k; i++) {
            if (i == 0) {
                temp = reverse(temp, k);
                head = temp;
            }
            else {
                temp->next = reverse(temp->next, k);
            }
            for (int j = 0; j < (i == 0 ? k-1 : k); j++)
                temp = temp->next;
        }
        return head;
    }
};
